<% var item, key %><%
htmlWebpackPlugin.options.appMountIds = htmlWebpackPlugin.options.appMountIds || [] %><%
htmlWebpackPlugin.options.lang = htmlWebpackPlugin.options.lang || "en" %><%
htmlWebpackPlugin.options.links = htmlWebpackPlugin.options.links || [] %><%
htmlWebpackPlugin.options.meta = htmlWebpackPlugin.options.meta || [] %><%
htmlWebpackPlugin.options.scripts = htmlWebpackPlugin.options.scripts || []
%><!DOCTYPE html>
<html lang="<%= htmlWebpackPlugin.options.lang %>"<% if (htmlWebpackPlugin.files.manifest) { %> manifest="<%= htmlWebpackPlugin.files.manifest %>"<% } %>>
  <head>

    <meta charset="utf-8">

    <meta content="ie=edge" http-equiv="x-ua-compatible"><%

    if (htmlWebpackPlugin.options.baseHref) { %>
    <base href="<%= htmlWebpackPlugin.options.baseHref %>"><%
    } %><%

    if (Array.isArray(htmlWebpackPlugin.options.meta)) { %><%
      for (item of htmlWebpackPlugin.options.meta) { %>
    <meta<% for (key in item) { %> <%= key %>="<%= item[key] %>"<% } %>><%
      } %><%
    } %><%

    %>
    <title><%= htmlWebpackPlugin.options.title %></title>

		<%
    if (htmlWebpackPlugin.files.favicon) { %>
    <link href="<%= htmlWebpackPlugin.files.favicon %>" rel="shortcut icon" /><%
    } %><%

    if (htmlWebpackPlugin.options.mobile) { %>
    <meta content="width=device-width, initial-scale=1" name="viewport"><%
    } %><%

    for (item of htmlWebpackPlugin.options.links) { %><%
      if (typeof item === 'string' || item instanceof String) { item = { href: item, rel: 'stylesheet' } } %>
    <link<% for (key in item) { %> <%= key %>="<%= item[key] %>"<% } %> /><%
    } %><%

    for (key in htmlWebpackPlugin.files.css) { %><%
      if (htmlWebpackPlugin.files.cssIntegrity) { %>
    <link
      href="<%= htmlWebpackPlugin.files.css[key] %>"
      rel="stylesheet"
      integrity="<%= htmlWebpackPlugin.files.cssIntegrity[key] %>"
      crossorigin="<%= webpackConfig.output.crossOriginLoading %>" /><%
      } else { %>
    <link href="<%= htmlWebpackPlugin.files.css[key] %>" rel="stylesheet" /><%
      } %><%
    } %><%
    if (htmlWebpackPlugin.options.headHtmlSnippet) { %>
    <%= htmlWebpackPlugin.options.headHtmlSnippet %><%
    }

    for (key in htmlWebpackPlugin.files.chunks) { %><%
      if (htmlWebpackPlugin.files.jsIntegrity) { %>
    <script async
      src="<%= htmlWebpackPlugin.files.chunks[key].entry %>"
      integrity="<%= htmlWebpackPlugin.files.jsIntegrity[htmlWebpackPlugin.files.js.indexOf(htmlWebpackPlugin.files.chunks[key].entry)] %>"
      crossorigin="<%= webpackConfig.output.crossOriginLoading %>"></script><%
      } else { %>
    <script async    src="<%= htmlWebpackPlugin.files.chunks[key].entry %>" </script><%
      } %><%
    }
		%>

		<%
    for (item of htmlWebpackPlugin.options.scripts) { %><%
      if (typeof item === 'string' || item instanceof String) { item = { src: item, type: 'text/javascript' } } %>
    <script async <% for (key in item) { %> <%= key %>="<%= item[key] %>"<% } %>></script><%
    } %>

      <!-- TESTING -->

  </head>
  <script async defer="defer" type="application/javascript" >
    "use strict";

    var DEBUG = true;
    var EcmaToolkit;
    DEBUG ? console.info('[EtkHtml] ', window.etk) : null;
    document.addEventListener('readystatechange', function () {
      DEBUG ? console.log('[EtkHtml] readyState:' + document.readyState, window.etk) : null;

      if (document.readyState == 'complete') {
        //console.log(window.etk)
        //var Etk = window.etk.default;

        // Etk.onLoad = function () {
        //   console.log("[EtkHtml] Works! (overridden)");
        //   console.log("[EtkHtml] Timestamps", etk.default.info.timestamps);
        // };

        //EcmaToolkit = new Etk();
      }
    });
    document.addEventListener('ETKContentLoaded', function () {
      DEBUG ? console.log('[Etk] readyState:' + document.readyState, window.etk) : null;

      if (document.readyState == 'complete') {
        console.log(window.etk)
        var Etk = window.etk.default;

        Etk.onLoad = function () {
          console.log("[Etk] Works! (overridden)");
          console.log("[Etk] Timestamps", etk.default.info.timestamps);
        };

        EcmaToolkit = new Etk();
      }
    });
    document.addEventListener('DOMContentLoaded', function () {
      DEBUG ? console.info('[EtkHtml]  DOMContentLoaded', window.etk) : null;
    });
    window.addEventListener('load', function () {
      DEBUG ? console.info('[EtkHtml]  load', window.etk) : null;
      return;
      if (!window.etk) setTimeout(function () {
        DEBUG ? console.info('[EtkHtml]  +200ms', window.etk) : null;
        if (!window.etk) setTimeout(function () {
          DEBUG ? console.info('[EtkHtml]  +600ms', window.etk) : null;
        }, 600);
      }, 200);
    });
  </script>
  <body>
		<%
    if (htmlWebpackPlugin.options.unsupportedBrowser) { %>
    <style>.unsupported-browser { display: none; }</style>
    <div class="unsupported-browser">
      Sorry, your browser is not supported. Please upgrade to the latest version or switch your browser to use this
      site. See <a href="http://outdatedbrowser.com/">outdatedbrowser.com</a> for options.
    </div><%
    } %><%

    if (htmlWebpackPlugin.options.bodyHtmlSnippet) { %>
    <%= htmlWebpackPlugin.options.bodyHtmlSnippet %><%
    } %><%

    if (htmlWebpackPlugin.options.appMountId) { %>
    <div id="<%= htmlWebpackPlugin.options.appMountId %>"><%
      if (htmlWebpackPlugin.options.appMountHtmlSnippet) { %>
    <%= htmlWebpackPlugin.options.appMountHtmlSnippet %><%
      } %>
    </div><%
    } %><%

    for (item of htmlWebpackPlugin.options.appMountIds) { %>
    <div id="<%= item %>"></div><%
    } %><%

    if (htmlWebpackPlugin.options.window) { %>
    <script async  type="text/javascript"><%
      for (key in htmlWebpackPlugin.options.window) { %>
      window['<%= key %>'] = <%= JSON.stringify(htmlWebpackPlugin.options.window[key]) %>;<%
      } %>
    </script><%
    } %><%

    if (htmlWebpackPlugin.options.inlineManifestWebpackName) { %>
    <%= htmlWebpackPlugin.files[htmlWebpackPlugin.options.inlineManifestWebpackName] %><%
    } %><%
 %><%

    if (htmlWebpackPlugin.options.devServer) { %>
    <script async  src="<%= htmlWebpackPlugin.options.devServer %>/webpack-dev-server.js" type="text/javascript"></script><%
    } %>
</body>
</html>

